devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
load("D:/Rpackage/StatComp22088/data/data.rda")
View(data)
load("D:/Rpackage/StatComp22088/data/X.rda")
View(X)
Y<-X[,1:300]
save(Y,file = 'Y.rda',compress = 'xz')
save(Y,file = 'X.rda',compress = 'xz')
gc()
gc()
devtools::document()
devtools::check()
devtools::check()
load("D:/Rpackage/StatComp22088/data/X.rda")
View(Y)
X<-Y
save(X,file = 'X.rda',compress = 'xz')
load("D:/Rpackage/StatComp22088/data/X.rda")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(StatComp22088)
load(time)
time()
time
data(time)
attach(time)
time
devtools::build_vignettes()
?Surv
devtools::document()
devtools::check()
devtools::check()
devtools::build_vignettes()
library(StatComp22088)
data("label")
label
typeof(label)
data(time)
typeof(time)
time
unlist(label)
View(label)
data(data)
View(data)
load("D:/Rpackage/StatComp22088/data/label.rda")
load("C:/Users/5251/Desktop/统计计算/final/label.RData")
library(openxlsx)
data<-read.xlsx("new train data.xlsx")
View(data)
data$质量等级<-0
data[which(data$机器质量等级=="L"),]$质量等级<-1
data[which(data$机器质量等级=="M"),]$质量等级<-2
data[which(data$机器质量等级=="H"),]$质量等级<-4
data<-data[,-1]
set.seed(12345)
colnames(data)<-c("D","V","N","T","E","L")
data$E<-as.factor(data$E)
data$L<-as.numeric(data$L)
data1<-data[which(data$E=="RNF"|data$E=="TWF"),]
rose1<-ROSE(E~.,data1,N=120,seed=1)$data
library(ROSE)
data$质量等级<-0
data[which(data$机器质量等级=="L"),]$质量等级<-1
library(openxlsx)
library(ROSE)
library(pheatmap)
data<-read.xlsx("new train data.xlsx")
data$质量等级<-0
data[which(data$机器质量等级=="L"),]$质量等级<-1
data[which(data$机器质量等级=="M"),]$质量等级<-2
data[which(data$机器质量等级=="H"),]$质量等级<-4
data<-data[,-1]
set.seed(12345)
colnames(data)<-c("D","V","N","T","E","L")
data$E<-as.factor(data$E)
data$L<-as.numeric(data$L)
data1<-data[which(data$E=="RNF"|data$E=="TWF"),]
rose1<-ROSE(E~.,data1,N=120,seed=1)$data
table(rose1$E)
data2<-data[which(data$E=="HDF"|data$E=="OSF"),]
rose2<-ROSE(E~.,data2,N=120,seed=1)$data
table(rose2$E)
data3<-data[which(data$E=="PWF"|data$E=="OSF"),]
rose3<-ROSE(E~.,data3,N=120,seed=1)$data
table(rose3$E)
rose3<-rose3[which(rose3$E=="PWF"),]
dt<-data.frame(rbind(rose1,rose2,rose3))
# 函数归一化
normalize = function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
dt[,-5] = as.data.frame(lapply(dt[,-5], normalize))
View(dt)
label=dt$E
label
typeof(label)
save(label,file="label.rda",compress = 'xz')
load("D:/Rpackage/StatComp22088/label.rda")
label
typeof(label)
load("D:/Rpackage/StatComp22088/data/label.rda")
typeof(label)
devtools::document()
devtools::check()
devtools::build_vignettes()
library(StatComp22088)
data(time)
data(event)
data(X)
data(Z)
res1<-flcrm(time,event,X,Z,10,1)
res1
mlearning<-function(label,data,k=5,methods=c("nnet","knn","SVM","rF")){
##knn
if(is.null(intersect("knn",methods))==FALSE){
mth[2]<-1
for(i in 1:k){
index<-ind[(floor((i-1)*n/5)+1):floor(i*n/5)]
train_data=data[-index,]
test_data=data[index,]
train_label<-label[-index]
test_label<-label[index]
obj <- tune.knn(train_data,train_label,k=2:10,tunecontrol=tune.control(sampling = "boot"))
best_k<-as.numeric(obj$best.parameters)
dt_knn<-knn(train = train_data,test = test_data,cl=train_label,k=best_k)
ConfM<-table(test_label,dt_knn)
Acc[i]<-sum(diag(ConfM))/sum(ConfM)
P[i]<-mean(diag(ConfM)/apply(ConfM,2,sum))
R[i]<-mean(diag(ConfM)/apply(ConfM,1,sum))
F1[i]<-2/(1/R[i]+1/P[i])
test_label<-as.numeric(test_label)
dt_knn<-as.numeric(dt_knn)
Auc[i]<-multiclass.roc(test_label,dt_knn)$auc[1]
}
best_knn<-obj$best.parameters
res_knn<-c(mean(Acc),mean(R),mean(P),mean(F1),mean(Auc))
names(res_knn)<-c("Acc","R","P","F1","Auc")
}
##nnet
##svm
##rF
}
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=10,methods="knn")
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=10,methods="knn")
library(StatComp22088)
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=10,methods="knn")
is.null(intersect("knn",'knn'))
is.null(intersect("knn",'knn'))==FALSE
is.null(intersect("knn",'nnet'))==FALSE
is.null(intersect("knn",'nnet'))
intersect("knn",'nnet')
is.null(intersect("knn",'nnet'))
is.null(intersect("knn",'nnet')='')
is.null(intersect("knn",'nnet')=='')
intersect("knn",'nnet')
intersect("knn",'nnet')==None
intersect("knn",'nnet')==Null
intersect("knn",'nnet')==NULL
length(intersect("knn",'nnet'))
length(intersect("knn",c('nnet','knn')))
mlearning<-function(label,data,k=5,methods=c("nnet","knn","SVM","rF")){
n<-length(label)
ind<-sample(1:n)
Acc<-numeric(k)
R<-numeric(k)
P<-numeric(k)
F1<-numeric(k)
Auc<-numeric(k)
mth<-c(0,0,0,0)
if(length(intersect("nnet",methods))==1){
mth[1]<-1
for(i in 1:k){
index<-ind[(floor((i-1)*n/5)+1):floor(i*n/5)]
train_data=data[-index,]
test_data=data[index,]
train_label<-label[-index]
test_label<-label[index]
datatrain<-cbind(train_data,train_label)
obj<-e1071::tune.nnet(train_label~., data=datatrain,size=2:10,maxit=1000)
best_size<-as.numeric(obj$best.parameters)
nnet.sol <- nnet::nnet(train_label~., datatrain, size =best_size, maxit = 1000)
pred.prob <- stats::predict(nnet.sol, test_data)
pred<-character(nrow(pred.prob))
for(j in 1:nrow(pred.prob)){
pred[j]<-names(which(pred.prob[j,]==max(pred.prob[j,])))
}
pred<-as.factor(pred)
ConfM<-table(test_label,pred)
c<-numeric(nrow(ConfM))
for(j in 1:nrow(ConfM)){
c[j]<-which(names(ConfM[1,])==names(ConfM[,1])[j])
}
ConfM<-ConfM[,c]
Acc[i]<-sum(diag(ConfM))/sum(ConfM)
R[i]<-mean(diag(ConfM)/apply(ConfM,2,sum))
P[i]<-mean(diag(ConfM)/apply(ConfM,1,sum))
F1[i]<-2/(1/R[i]+1/P[i])
test_label<-as.numeric(test_label)
pred<-as.numeric(pred)
Auc[i]<-pROC::multiclass.roc(test_label,pred)$auc[1]
}
best_nnet<-obj$best.parameters
res_nnet<-c(mean(Acc),mean(R),mean(P),mean(F1),mean(Auc))
names(res_nnet)<-c("Acc","R","P","F1","Auc")
}
if(length(intersect("knn",methods))==1){
mth[2]<-1
for(i in 1:k){
index<-ind[(floor((i-1)*n/5)+1):floor(i*n/5)]
train_data=data[-index,]
test_data=data[index,]
train_label<-label[-index]
test_label<-label[index]
obj <- e1071::tune.knn(train_data,train_label,k=2:10,tunecontrol=e1071::tune.control(sampling = "boot"))
best_k<-as.numeric(obj$best.parameters)
dt_knn<-class::knn(train = train_data,test = test_data,cl=train_label,k=best_k)
ConfM<-table(test_label,dt_knn)
Acc[i]<-sum(diag(ConfM))/sum(ConfM)
P[i]<-mean(diag(ConfM)/apply(ConfM,2,sum))
R[i]<-mean(diag(ConfM)/apply(ConfM,1,sum))
F1[i]<-2/(1/R[i]+1/P[i])
test_label<-as.numeric(test_label)
dt_knn<-as.numeric(dt_knn)
Auc[i]<-pROC::multiclass.roc(test_label,dt_knn)$auc[1]
}
best_knn<-obj$best.parameters
res_knn<-c(mean(Acc),mean(R),mean(P),mean(F1),mean(Auc))
names(res_knn)<-c("Acc","R","P","F1","Auc")
}
if(length(intersect("SVM",methods))==1){
mth[3]<-1
for(i in 1:k){
index<-ind[(floor((i-1)*n/5)+1):floor(i*n/5)]
train_data=data[-index,]
test_data=data[index,]
train_label<-label[-index]
test_label<-label[index]
datatrain<-cbind(train_data,train_label)
tObj<-e1071::tune.svm(train_label~.,data=datatrain,type="C-classification",kernel="radial",cost=2^seq(-10,10,1),gamma=2^seq(-10,10,1),scale=FALSE)
first<-tObj$best.parameters
num1<-as.numeric(log2(first[1]))
num2<-as.numeric(log2(first[2]))
tObj<-e1071::tune.svm(train_label~.,data=datatrain,type="C-classification",kernel="radial",cost=2^seq(num2-1,num2+1,0.1),gamma=2^seq(num1-1,num1+1,0.1),scale=FALSE)
BestSvm<-tObj$best.model
yPred<-stats::predict(BestSvm,test_data)
ConfM<-table(test_label,yPred)
Acc[i]<-sum(diag(ConfM))/sum(ConfM)
P[i]<-mean(diag(ConfM)/apply(ConfM,2,sum))
R[i]<-mean(diag(ConfM)/apply(ConfM,1,sum))
F1[i]<-2/(1/R[i]+1/P[i])
test_label<-as.numeric(test_label)
yPred<-as.numeric(yPred)
Auc[i]<-pROC::multiclass.roc(test_label,yPred)$auc[1]
}
best_svm<-tObj$best.parameters
res_svm<-c(mean(Acc),mean(R),mean(P),mean(F1),mean(Auc))
names(res_svm)<-c("Acc","R","P","F1","Auc")
}
if(length(intersect("rF",methods))==1){
mth[4]<-1
for(i in 1:k){
index<-ind[(floor((i-1)*n/5)+1):floor(i*n/5)]
train_data=data[-index,]
test_data=data[index,]
train_label<-label[-index]
test_label<-label[index]
datatrain<-cbind(train_data,train_label)
obj<-e1071::tune.randomForest(train_label~.,data =datatrain, ntree = seq(100,1000,100))
best_ntree<-as.numeric(obj$best.parameters)
model <- randomForest::randomForest(train_label~.,data =datatrain,ntree=best_ntree)
pred.model <- stats::predict(model,test_data)
ConfM<-table(test_label,pred.model)
Acc[i]<-sum(diag(ConfM))/sum(ConfM)
P[i]<-mean(diag(ConfM)/apply(ConfM,2,sum))
R[i]<-mean(diag(ConfM)/apply(ConfM,1,sum))
F1[i]<-2/(1/R[i]+1/P[i])
test_label<-as.numeric(test_label)
pred.model<-as.numeric(pred.model)
Auc[i]<-pROC::multiclass.roc(test_label,pred.model)$auc[1]
}
best_rF<-obj$best.parameters
res_rF<-c(mean(Acc),mean(R),mean(P),mean(F1),mean(Auc))
names(res_rF)<-c("Acc","R","P","F1","Auc")
}
final<-list()
if(mth[1]==1){
final$nnet=list(best_parameters=best_nnet,results=res_nnet)
}
if(mth[2]==1){
final$knn=list(best_parameters=best_knn,results=res_knn)
}
if(mth[3]==1){
final$svm=list(best_parameters=best_svm,results=res_svm)
}
if(mth[4]==1){
final$rF=list(best_parameters=best_rF,results=res_rF)
}
return(final)
}
data(label)
data(data)
res2<-mlearning(label,data,k=10,methods="knn")
label
View(data)
label[1:20]
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=10,methods="knn")
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=1,methods="knn")
res2
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=5,methods="knn")
res2
#library(nnet)
data(label)
data(data)
res2<-mlearning(label,data,k=5,methods="knn")
res2
library(microbenchmark)
X<-matrix(rnorm(300),ncol=30)
res3 <- microbenchmark(
SVDR = svd(),
SVDC = SVD_V()
)
library(microbenchmark)
X<-matrix(rnorm(300),ncol=30)
res3 <- microbenchmark(
SVDR = svd(X),
SVDC = SVD_V(X)
)
knitr::kable(summary(res3)[,c(1,3,5,6)])
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('D:/Rpackage/StatComp22088_1.0.tar.gz',repo=NULL)
install.packages('D:/Rpackage/StatComp22088_1.0.tar.gz',repo=NULL)
